html 에서 div.클래스이름 +Tab  -> <div class="클래스이름"></div> 자동완성

css selector 여러개를 한꺼번에 속성 지정할때 ' , ' 로 연결 

div.controls_btns>button#jsMode+button#jsSave 자동완성 !! 
<div class="controls_btns"><button id="jsMode"></button><button id="jsSave"></button></div>  

CSS에서 선택자를 나열 ( , 없이 ) 한건 부모 선택자를 나타 내기 위함 
-> 마지막의 선택자에 대해서만 작성한 속성이 적용 된다. (주석과 같은 느낌)

button:active{			->IN CSS , 버튼 클릭시 크기 0.9배 로 변화
    transform : scale(0.90);
}

Mouse Event 에서 Client 좌표는 웹 창 전체에 대한 절대좌표
	offset 좌표는 해당 태그의 범위 안에서의 상대 좌표를 나타냄

canvas 에서 css에서 눈에 보이는 사이즈를 정해주고 JS에서 pixel을 얼마나 담을지 사이즈 지정 필요
css에서의 사이즈와 JS에서의 사이즈가 다르면 비율에 이상이 생긴다. 일치 필요!
 
context는 canvas에서 픽셀을 다루는 도구가 된다.

1. clientX, clientY
위 메서드는 클라이언트 영역 내의 가로,세로 좌표를 제공합니다. 여기서 클라이언트 영역은 현재 보이는 브라우저 화면이 기준이 됩니다.

clientX : 브라우저 페이지에서의 X좌표 위치를 반환하나 스크롤은 무시하고 해당 페이지의 상단을 0으로 측정합니다.

clientY : 브라우저 페이지에서의 Y좌표 위치를 반환하나 스크롤은 무시하고 해당 페이지의 상단을 0으로 측정합니다.

2. offsetX, offsetY
위 메서드는 이벤트 대상이 기준이 됩니다. ( 화면 중간에 있는 박스 내부에서 클릭한 위치를 찾을 때 해당 박스의 왼쪽 모서리 좌표가 0이됩니다. 화면의 기준이 아닙니다)

전체 문서를 기준으로 합니다(스크롤 화면 포함)

offsetX : 이벤트 대상 객체에서의 상대적 마우스 x좌표 위치를 반환합니다.

offsetY : 이벤트 대상 객체에서의 상대적 마우스 y좌표 위치를 반환합니다.

3. pageX, pageY
위 메서드는 전체 문서를 기준으로 x,y 좌표를 반환 합니다. 스크롤 화면을 포함해서 측정합니다.

pageX : 브라우저 페이지에서의 x좌표 위치를 반환합니다.

pageY : 브라우저 페이지에서의 Y좌표 위치를 반환합니다.

4. screenX, screenY
위 메서드는 모니터 화면을 기준으로 좌표를 제공합니다. 여기서 중요한 점은 브라우저 화면이 아니라 자신의 모니터 화면 전체를 기준으로 좌표를 측정한다는 점입니다.

screenX : 전체 모니터 스크린에서의 x좌표 위치를 반환합니다.

screenY :전체 모니터 스크린에서의 y좌표 위치를 반환합니다.




Array.from(객체) -> 객체를 배열로 만든다
 

이벤트가 발생한 태그를 가져올때 => event.target 

Array.forEach(원소 => 각 원소 접근)  : => 기호 꼭 필요 문법사항임

이벤트처리 시 이벤트 상황
console.dir(객체)에 나오는 이벤트 이름은 on~ 이여도 
addEventListener를 줄때는 그냥 "~"라고 지정한다 ex) onclick->"click"